// Generated by Dagger (https://google.github.io/dagger).
package com.salamquran.android.component.application;

import android.content.Context;
import android.view.Display;
import com.ermile.common.networking.NetworkModule;
import com.ermile.common.networking.NetworkModule_ProvideOkHttpClientFactory;
import com.ermile.common.networking.dns.DnsModule;
import com.ermile.common.networking.dns.DnsModule_ProvideDnsCacheFactory;
import com.ermile.common.networking.dns.DnsModule_ProvideServersFactory;
import com.ermile.common.networking.dns.DnsModule_ProvidesDnsFactory;
import com.ermile.data.page.provider.QuranPageModule;
import com.ermile.data.page.provider.QuranPageModule_ProvideImageDrawHelpersFactory;
import com.ermile.data.page.provider.QuranPageModule_ProvideMadaniPageSetFactory;
import com.ermile.data.source.DisplaySize;
import com.ermile.data.source.PageProvider;
import com.ermile.data.source.PageSizeCalculator;
import com.ermile.page.common.draw.ImageDrawHelper;
import com.salamquran.android.QuranDataActivity;
import com.salamquran.android.QuranDataActivity_MembersInjector;
import com.salamquran.android.QuranForwarderActivity;
import com.salamquran.android.QuranForwarderActivity_MembersInjector;
import com.salamquran.android.QuranImportActivity;
import com.salamquran.android.QuranImportActivity_MembersInjector;
import com.salamquran.android.SearchActivity;
import com.salamquran.android.SearchActivity_MembersInjector;
import com.salamquran.android.component.activity.PagerActivityComponent;
import com.salamquran.android.component.fragment.QuranPageComponent;
import com.salamquran.android.data.AyahInfoDatabaseProvider;
import com.salamquran.android.data.AyahInfoDatabaseProvider_Factory;
import com.salamquran.android.data.QuranDataModule;
import com.salamquran.android.data.QuranDataModule_ProvideQuranPageProviderFactory;
import com.salamquran.android.data.QuranDataProvider;
import com.salamquran.android.data.QuranDataProvider_MembersInjector;
import com.salamquran.android.data.QuranInfo;
import com.salamquran.android.data.QuranInfo_Factory;
import com.salamquran.android.database.BookmarksDBAdapter;
import com.salamquran.android.database.TranslationsDBAdapter;
import com.salamquran.android.database.TranslationsDBAdapter_Factory;
import com.salamquran.android.database.TranslationsDBHelper_Factory;
import com.salamquran.android.model.bookmark.BookmarkImportExportModel;
import com.salamquran.android.model.bookmark.BookmarkImportExportModel_Factory;
import com.salamquran.android.model.bookmark.BookmarkJsonModel_Factory;
import com.salamquran.android.model.bookmark.BookmarkModel;
import com.salamquran.android.model.bookmark.BookmarkModel_Factory;
import com.salamquran.android.model.bookmark.RecentPageModel;
import com.salamquran.android.model.bookmark.RecentPageModel_Factory;
import com.salamquran.android.model.quran.CoordinatesModel;
import com.salamquran.android.model.quran.CoordinatesModel_Factory;
import com.salamquran.android.model.translation.ArabicDatabaseUtils;
import com.salamquran.android.model.translation.ArabicDatabaseUtils_Factory;
import com.salamquran.android.model.translation.TranslationModel;
import com.salamquran.android.model.translation.TranslationModel_Factory;
import com.salamquran.android.module.activity.PagerActivityModule;
import com.salamquran.android.module.activity.PagerActivityModule_ProvideAyahSelectedListenerFactory;
import com.salamquran.android.module.activity.PagerActivityModule_ProvideImageWidthFactory;
import com.salamquran.android.module.activity.PagerActivityModule_ProvideTranslationUtilFactory;
import com.salamquran.android.module.application.ApplicationModule;
import com.salamquran.android.module.application.ApplicationModule_ProvideApplicationContextFactory;
import com.salamquran.android.module.application.ApplicationModule_ProvideCacheDirectoryFactory;
import com.salamquran.android.module.application.ApplicationModule_ProvideDisplayFactory;
import com.salamquran.android.module.application.ApplicationModule_ProvideDisplaySizeFactory;
import com.salamquran.android.module.application.ApplicationModule_ProvideMainThreadSchedulerFactory;
import com.salamquran.android.module.application.ApplicationModule_ProvideQuranPageSizeCalculatorFactory;
import com.salamquran.android.module.application.ApplicationModule_ProvideQuranSettingsFactory;
import com.salamquran.android.module.application.DatabaseModule;
import com.salamquran.android.module.application.DatabaseModule_ProvideBookmarkDatabaseAdapterFactory;
import com.salamquran.android.module.fragment.QuranPageModule_ProvidePagesFactory;
import com.salamquran.android.pageselect.PageSelectActivity;
import com.salamquran.android.pageselect.PageSelectActivity_MembersInjector;
import com.salamquran.android.pageselect.PageSelectPresenter;
import com.salamquran.android.pageselect.PageSelectPresenter_Factory;
import com.salamquran.android.presenter.QuranImportPresenter;
import com.salamquran.android.presenter.QuranImportPresenter_Factory;
import com.salamquran.android.presenter.audio.AudioPresenter;
import com.salamquran.android.presenter.bookmark.AddTagDialogPresenter;
import com.salamquran.android.presenter.bookmark.BookmarkPresenter;
import com.salamquran.android.presenter.bookmark.BookmarkPresenter_Factory;
import com.salamquran.android.presenter.bookmark.BookmarksContextualModePresenter;
import com.salamquran.android.presenter.bookmark.BookmarksContextualModePresenter_Factory;
import com.salamquran.android.presenter.bookmark.RecentPagePresenter;
import com.salamquran.android.presenter.bookmark.RecentPagePresenter_Factory;
import com.salamquran.android.presenter.bookmark.TagBookmarkPresenter;
import com.salamquran.android.presenter.bookmark.TagBookmarkPresenter_Factory;
import com.salamquran.android.presenter.data.QuranDataPresenter;
import com.salamquran.android.presenter.quran.QuranPagePresenter;
import com.salamquran.android.presenter.quran.QuranPagePresenter_Factory;
import com.salamquran.android.presenter.quran.ayahtracker.AyahTrackerPresenter;
import com.salamquran.android.presenter.quran.ayahtracker.AyahTrackerPresenter_Factory;
import com.salamquran.android.presenter.translation.InlineTranslationPresenter;
import com.salamquran.android.presenter.translation.InlineTranslationPresenter_Factory;
import com.salamquran.android.presenter.translation.TranslationManagerPresenter;
import com.salamquran.android.presenter.translation.TranslationManagerPresenter_Factory;
import com.salamquran.android.presenter.translation.TranslationPresenter;
import com.salamquran.android.presenter.translation.TranslationPresenter_Factory;
import com.salamquran.android.service.AudioService;
import com.salamquran.android.service.AudioService_MembersInjector;
import com.salamquran.android.service.QuranDownloadService;
import com.salamquran.android.service.QuranDownloadService_MembersInjector;
import com.salamquran.android.ui.AudioManagerActivity;
import com.salamquran.android.ui.AudioManagerActivity_MembersInjector;
import com.salamquran.android.ui.PagerActivity;
import com.salamquran.android.ui.PagerActivity_MembersInjector;
import com.salamquran.android.ui.QuranActivity;
import com.salamquran.android.ui.QuranActivity_MembersInjector;
import com.salamquran.android.ui.TranslationManagerActivity;
import com.salamquran.android.ui.TranslationManagerActivity_MembersInjector;
import com.salamquran.android.ui.fragment.AddTagDialog;
import com.salamquran.android.ui.fragment.AddTagDialog_MembersInjector;
import com.salamquran.android.ui.fragment.AyahPlaybackFragment;
import com.salamquran.android.ui.fragment.AyahPlaybackFragment_MembersInjector;
import com.salamquran.android.ui.fragment.AyahTranslationFragment;
import com.salamquran.android.ui.fragment.AyahTranslationFragment_MembersInjector;
import com.salamquran.android.ui.fragment.BookmarksFragment;
import com.salamquran.android.ui.fragment.BookmarksFragment_MembersInjector;
import com.salamquran.android.ui.fragment.JumpFragment;
import com.salamquran.android.ui.fragment.JumpFragment_MembersInjector;
import com.salamquran.android.ui.fragment.JuzListFragment;
import com.salamquran.android.ui.fragment.JuzListFragment_MembersInjector;
import com.salamquran.android.ui.fragment.QuranAdvancedSettingsFragment;
import com.salamquran.android.ui.fragment.QuranAdvancedSettingsFragment_MembersInjector;
import com.salamquran.android.ui.fragment.QuranPageFragment;
import com.salamquran.android.ui.fragment.QuranPageFragment_MembersInjector;
import com.salamquran.android.ui.fragment.QuranSettingsFragment;
import com.salamquran.android.ui.fragment.QuranSettingsFragment_MembersInjector;
import com.salamquran.android.ui.fragment.SuraListFragment;
import com.salamquran.android.ui.fragment.SuraListFragment_MembersInjector;
import com.salamquran.android.ui.fragment.TabletFragment;
import com.salamquran.android.ui.fragment.TabletFragment_MembersInjector;
import com.salamquran.android.ui.fragment.TagBookmarkDialog;
import com.salamquran.android.ui.fragment.TagBookmarkDialog_MembersInjector;
import com.salamquran.android.ui.fragment.TranslationFragment;
import com.salamquran.android.ui.fragment.TranslationFragment_MembersInjector;
import com.salamquran.android.ui.helpers.QuranPageWorker;
import com.salamquran.android.ui.helpers.QuranPageWorker_Factory;
import com.salamquran.android.ui.helpers.QuranRowFactory;
import com.salamquran.android.ui.helpers.QuranRowFactory_Factory;
import com.salamquran.android.util.AudioUtils;
import com.salamquran.android.util.AudioUtils_Factory;
import com.salamquran.android.util.CopyDatabaseUtil;
import com.salamquran.android.util.ImageUtil;
import com.salamquran.android.util.ImageUtil_Factory;
import com.salamquran.android.util.QuranAppUtils;
import com.salamquran.android.util.QuranAppUtils_Factory;
import com.salamquran.android.util.QuranFileUtils;
import com.salamquran.android.util.QuranFileUtils_Factory;
import com.salamquran.android.util.QuranScreenInfo;
import com.salamquran.android.util.QuranScreenInfo_Factory;
import com.salamquran.android.util.QuranSettings;
import com.salamquran.android.util.ShareUtil;
import com.salamquran.android.util.ShareUtil_Factory;
import com.salamquran.android.util.TranslationUtil;
import dagger.internal.DoubleCheck;
import dagger.internal.MapFactory;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import dagger.internal.SingleCheck;
import io.reactivex.Scheduler;
import java.io.File;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.Dns;
import okhttp3.OkHttpClient;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private final ApplicationModule applicationModule;

  private Provider<QuranSettings> provideQuranSettingsProvider;

  private Provider<Context> provideApplicationContextProvider;

  @SuppressWarnings("rawtypes")
  private Provider translationsDBHelperProvider;

  private Provider<Map<String, PageProvider>> mapOfStringAndPageProvider;

  private Provider<PageProvider> provideQuranPageProvider;

  private Provider<Display> provideDisplayProvider;

  private Provider<DisplaySize> provideDisplaySizeProvider;

  private Provider<PageSizeCalculator> provideQuranPageSizeCalculatorProvider;

  private Provider<QuranScreenInfo> quranScreenInfoProvider;

  private Provider<QuranFileUtils> quranFileUtilsProvider;

  private Provider<TranslationsDBAdapter> translationsDBAdapterProvider;

  private Provider<QuranInfo> quranInfoProvider;

  private Provider<AudioUtils> audioUtilsProvider;

  private Provider<File> provideCacheDirectoryProvider;

  private Provider<Cache> provideDnsCacheProvider;

  private Provider<List<Dns>> provideServersProvider;

  private Provider<Dns> providesDnsProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<BookmarksDBAdapter> provideBookmarkDatabaseAdapterProvider;

  private Provider<RecentPageModel> recentPageModelProvider;

  private Provider<TranslationManagerPresenter> translationManagerPresenterProvider;

  private Provider<BookmarksContextualModePresenter> bookmarksContextualModePresenterProvider;

  private Provider<BookmarkModel> bookmarkModelProvider;

  private Provider<BookmarkImportExportModel> bookmarkImportExportModelProvider;

  private Provider<QuranImportPresenter> quranImportPresenterProvider;

  private Provider<ImageUtil> imageUtilProvider;

  private Provider<Scheduler> provideMainThreadSchedulerProvider;

  private Provider<PageSelectPresenter> pageSelectPresenterProvider;

  private Provider<ArabicDatabaseUtils> arabicDatabaseUtilsProvider;

  private Provider<QuranRowFactory> quranRowFactoryProvider;

  private Provider<BookmarkPresenter> bookmarkPresenterProvider;

  private Provider<TagBookmarkPresenter> tagBookmarkPresenterProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam,
      DnsModule dnsModuleParam) {
    this.applicationModule = applicationModuleParam;
    initialize(applicationModuleParam, dnsModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<String, PageProvider> getMapOfStringAndPageProvider() {
    return Collections.<String, PageProvider>singletonMap("madani", QuranPageModule_ProvideMadaniPageSetFactory.proxyProvideMadaniPageSet());}

  private PageProvider getPageProvider() {
    return QuranDataModule_ProvideQuranPageProviderFactory.proxyProvideQuranPageProvider(getMapOfStringAndPageProvider(), provideQuranSettingsProvider.get());}

  private QuranInfo getQuranInfo() {
    return new QuranInfo(getPageProvider());}

  private Display getDisplay() {
    return ApplicationModule_ProvideDisplayFactory.proxyProvideDisplay(applicationModule, ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(applicationModule));}

  private DisplaySize getDisplaySize() {
    return ApplicationModule_ProvideDisplaySizeFactory.proxyProvideDisplaySize(applicationModule, getDisplay());}

  private PageSizeCalculator getPageSizeCalculator() {
    return ApplicationModule_ProvideQuranPageSizeCalculatorFactory.proxyProvideQuranPageSizeCalculator(applicationModule, getPageProvider(), getDisplaySize());}

  private QuranScreenInfo getQuranScreenInfo() {
    return new QuranScreenInfo(ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(applicationModule), getDisplay(), getPageSizeCalculator());}

  private QuranFileUtils getQuranFileUtils() {
    return new QuranFileUtils(ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(applicationModule), getPageProvider(), getQuranScreenInfo());}

  private CopyDatabaseUtil getCopyDatabaseUtil() {
    return new CopyDatabaseUtil(ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(applicationModule), getQuranFileUtils());}

  private QuranDataPresenter getQuranDataPresenter() {
    return new QuranDataPresenter(ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(applicationModule), getQuranInfo(), getQuranScreenInfo(), getPageProvider(), getCopyDatabaseUtil(), getQuranFileUtils());}

  private BookmarkImportExportModel getBookmarkImportExportModel() {
    return BookmarkImportExportModel_Factory.newBookmarkImportExportModel(ApplicationModule_ProvideApplicationContextFactory.proxyProvideApplicationContext(applicationModule), BookmarkJsonModel_Factory.newBookmarkJsonModel(), bookmarkModelProvider.get());}

  private AddTagDialogPresenter getAddTagDialogPresenter() {
    return new AddTagDialogPresenter(bookmarkModelProvider.get());}

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam,
      final DnsModule dnsModuleParam) {
    this.provideQuranSettingsProvider = DoubleCheck.provider(ApplicationModule_ProvideQuranSettingsFactory.create(applicationModuleParam));
    this.provideApplicationContextProvider = ApplicationModule_ProvideApplicationContextFactory.create(applicationModuleParam);
    this.translationsDBHelperProvider = DoubleCheck.provider(TranslationsDBHelper_Factory.create(provideApplicationContextProvider));
    this.mapOfStringAndPageProvider = MapFactory.<String, PageProvider>builder(1).put("madani", QuranPageModule_ProvideMadaniPageSetFactory.create()).build();
    this.provideQuranPageProvider = QuranDataModule_ProvideQuranPageProviderFactory.create(mapOfStringAndPageProvider, provideQuranSettingsProvider);
    this.provideDisplayProvider = ApplicationModule_ProvideDisplayFactory.create(applicationModuleParam, provideApplicationContextProvider);
    this.provideDisplaySizeProvider = ApplicationModule_ProvideDisplaySizeFactory.create(applicationModuleParam, provideDisplayProvider);
    this.provideQuranPageSizeCalculatorProvider = ApplicationModule_ProvideQuranPageSizeCalculatorFactory.create(applicationModuleParam, provideQuranPageProvider, provideDisplaySizeProvider);
    this.quranScreenInfoProvider = QuranScreenInfo_Factory.create(provideApplicationContextProvider, provideDisplayProvider, provideQuranPageSizeCalculatorProvider);
    this.quranFileUtilsProvider = QuranFileUtils_Factory.create(provideApplicationContextProvider, provideQuranPageProvider, quranScreenInfoProvider);
    this.translationsDBAdapterProvider = DoubleCheck.provider(TranslationsDBAdapter_Factory.create(provideApplicationContextProvider, translationsDBHelperProvider, quranFileUtilsProvider));
    this.quranInfoProvider = QuranInfo_Factory.create(provideQuranPageProvider);
    this.audioUtilsProvider = SingleCheck.provider(AudioUtils_Factory.create(quranInfoProvider, quranFileUtilsProvider));
    this.provideCacheDirectoryProvider = ApplicationModule_ProvideCacheDirectoryFactory.create(applicationModuleParam);
    this.provideDnsCacheProvider = DnsModule_ProvideDnsCacheFactory.create(dnsModuleParam, provideCacheDirectoryProvider);
    this.provideServersProvider = DnsModule_ProvideServersFactory.create(dnsModuleParam, provideDnsCacheProvider);
    this.providesDnsProvider = DnsModule_ProvidesDnsFactory.create(dnsModuleParam, provideServersProvider);
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create(providesDnsProvider));
    this.provideBookmarkDatabaseAdapterProvider = DoubleCheck.provider(DatabaseModule_ProvideBookmarkDatabaseAdapterFactory.create(provideApplicationContextProvider, quranInfoProvider));
    this.recentPageModelProvider = DoubleCheck.provider(RecentPageModel_Factory.create(provideBookmarkDatabaseAdapterProvider));
    this.translationManagerPresenterProvider = DoubleCheck.provider(TranslationManagerPresenter_Factory.create(provideApplicationContextProvider, provideOkHttpClientProvider, provideQuranSettingsProvider, translationsDBAdapterProvider, quranFileUtilsProvider));
    this.bookmarksContextualModePresenterProvider = DoubleCheck.provider(BookmarksContextualModePresenter_Factory.create());
    this.bookmarkModelProvider = DoubleCheck.provider(BookmarkModel_Factory.create(provideBookmarkDatabaseAdapterProvider, recentPageModelProvider));
    this.bookmarkImportExportModelProvider = BookmarkImportExportModel_Factory.create(provideApplicationContextProvider, BookmarkJsonModel_Factory.create(), bookmarkModelProvider);
    this.quranImportPresenterProvider = DoubleCheck.provider(QuranImportPresenter_Factory.create(provideApplicationContextProvider, bookmarkImportExportModelProvider, bookmarkModelProvider));
    this.imageUtilProvider = ImageUtil_Factory.create(provideOkHttpClientProvider);
    this.provideMainThreadSchedulerProvider = ApplicationModule_ProvideMainThreadSchedulerFactory.create(applicationModuleParam);
    this.pageSelectPresenterProvider = SingleCheck.provider(PageSelectPresenter_Factory.create(imageUtilProvider, quranFileUtilsProvider, provideMainThreadSchedulerProvider, mapOfStringAndPageProvider));
    this.arabicDatabaseUtilsProvider = DoubleCheck.provider(ArabicDatabaseUtils_Factory.create(provideApplicationContextProvider, quranInfoProvider, quranFileUtilsProvider));
    this.quranRowFactoryProvider = SingleCheck.provider(QuranRowFactory_Factory.create(quranInfoProvider));
    this.bookmarkPresenterProvider = DoubleCheck.provider(BookmarkPresenter_Factory.create(provideApplicationContextProvider, bookmarkModelProvider, provideQuranSettingsProvider, arabicDatabaseUtilsProvider, quranRowFactoryProvider, quranInfoProvider));
    this.tagBookmarkPresenterProvider = DoubleCheck.provider(TagBookmarkPresenter_Factory.create(bookmarkModelProvider));
  }

  @Override
  public PagerActivityComponent.Builder pagerActivityComponentBuilder() {
    return new PagerActivityComponentBuilder();}

  @Override
  public void inject(QuranDataProvider quranDataProvider) {
    injectQuranDataProvider(quranDataProvider);}

  @Override
  public void inject(AudioService audioService) {
    injectAudioService(audioService);}

  @Override
  public void inject(QuranDownloadService quranDownloadService) {
    injectQuranDownloadService(quranDownloadService);}

  @Override
  public void inject(QuranActivity quranActivity) {
    injectQuranActivity(quranActivity);}

  @Override
  public void inject(QuranDataActivity quranDataActivity) {
    injectQuranDataActivity(quranDataActivity);}

  @Override
  public void inject(QuranImportActivity quranImportActivity) {
    injectQuranImportActivity(quranImportActivity);}

  @Override
  public void inject(AudioManagerActivity audioManagerActivity) {
    injectAudioManagerActivity(audioManagerActivity);}

  @Override
  public void inject(QuranForwarderActivity quranForwarderActivity) {
    injectQuranForwarderActivity(quranForwarderActivity);}

  @Override
  public void inject(SearchActivity searchActivity) {
    injectSearchActivity(searchActivity);}

  @Override
  public void inject(PageSelectActivity pageSelectActivity) {
    injectPageSelectActivity(pageSelectActivity);}

  @Override
  public void inject(BookmarksFragment bookmarksFragment) {
    injectBookmarksFragment(bookmarksFragment);}

  @Override
  public void inject(QuranSettingsFragment fragment) {
    injectQuranSettingsFragment(fragment);}

  @Override
  public void inject(TranslationManagerActivity translationManagerActivity) {
    injectTranslationManagerActivity(translationManagerActivity);}

  @Override
  public void inject(QuranAdvancedSettingsFragment quranAdvancedSettingsFragment) {
    injectQuranAdvancedSettingsFragment(quranAdvancedSettingsFragment);}

  @Override
  public void inject(SuraListFragment suraListFragment) {
    injectSuraListFragment(suraListFragment);}

  @Override
  public void inject(JuzListFragment juzListFragment) {
    injectJuzListFragment(juzListFragment);}

  @Override
  public void inject(AyahPlaybackFragment ayahPlaybackFragment) {
    injectAyahPlaybackFragment(ayahPlaybackFragment);}

  @Override
  public void inject(JumpFragment jumpFragment) {
    injectJumpFragment(jumpFragment);}

  @Override
  public void inject(TagBookmarkDialog tagBookmarkDialog) {
    injectTagBookmarkDialog(tagBookmarkDialog);}

  @Override
  public void inject(AddTagDialog addTagDialog) {
    injectAddTagDialog(addTagDialog);}

  private QuranDataProvider injectQuranDataProvider(QuranDataProvider instance) {
    QuranDataProvider_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    QuranDataProvider_MembersInjector.injectTranslationsDBAdapter(instance, translationsDBAdapterProvider.get());
    QuranDataProvider_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private AudioService injectAudioService(AudioService instance) {
    AudioService_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    AudioService_MembersInjector.injectAudioUtils(instance, audioUtilsProvider.get());
    return instance;
  }

  private QuranDownloadService injectQuranDownloadService(QuranDownloadService instance) {
    QuranDownloadService_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    QuranDownloadService_MembersInjector.injectOkHttpClient(instance, provideOkHttpClientProvider.get());
    return instance;
  }

  private QuranActivity injectQuranActivity(QuranActivity instance) {
    QuranActivity_MembersInjector.injectAudioUtils(instance, audioUtilsProvider.get());
    QuranActivity_MembersInjector.injectRecentPageModel(instance, recentPageModelProvider.get());
    QuranActivity_MembersInjector.injectTranslationManagerPresenter(instance, translationManagerPresenterProvider.get());
    QuranActivity_MembersInjector.injectBookmarksContextualModePresenter(instance, bookmarksContextualModePresenterProvider.get());
    return instance;
  }

  private QuranDataActivity injectQuranDataActivity(QuranDataActivity instance) {
    QuranDataActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    QuranDataActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    QuranDataActivity_MembersInjector.injectQuranScreenInfo(instance, getQuranScreenInfo());
    QuranDataActivity_MembersInjector.injectQuranPageProvider(instance, getPageProvider());
    QuranDataActivity_MembersInjector.injectCopyDatabaseUtil(instance, getCopyDatabaseUtil());
    QuranDataActivity_MembersInjector.injectQuranDataPresenter(instance, getQuranDataPresenter());
    return instance;
  }

  private QuranImportActivity injectQuranImportActivity(QuranImportActivity instance) {
    QuranImportActivity_MembersInjector.injectMPresenter(instance, quranImportPresenterProvider.get());
    return instance;
  }

  private AudioManagerActivity injectAudioManagerActivity(AudioManagerActivity instance) {
    AudioManagerActivity_MembersInjector.injectAudioUtils(instance, audioUtilsProvider.get());
    AudioManagerActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    AudioManagerActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private QuranForwarderActivity injectQuranForwarderActivity(QuranForwarderActivity instance) {
    QuranForwarderActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private SearchActivity injectSearchActivity(SearchActivity instance) {
    SearchActivity_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    SearchActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private PageSelectActivity injectPageSelectActivity(PageSelectActivity instance) {
    PageSelectActivity_MembersInjector.injectPresenter(instance, pageSelectPresenterProvider.get());
    PageSelectActivity_MembersInjector.injectQuranSettings(instance, provideQuranSettingsProvider.get());
    return instance;
  }

  private BookmarksFragment injectBookmarksFragment(BookmarksFragment instance) {
    BookmarksFragment_MembersInjector.injectBookmarkPresenter(instance, bookmarkPresenterProvider.get());
    BookmarksFragment_MembersInjector.injectBookmarksContextualModePresenter(instance, bookmarksContextualModePresenterProvider.get());
    return instance;
  }

  private QuranSettingsFragment injectQuranSettingsFragment(QuranSettingsFragment instance) {
    QuranSettingsFragment_MembersInjector.injectPageTypes(instance, getMapOfStringAndPageProvider());
    return instance;
  }

  private TranslationManagerActivity injectTranslationManagerActivity(
      TranslationManagerActivity instance) {
    TranslationManagerActivity_MembersInjector.injectPresenter(instance, translationManagerPresenterProvider.get());
    TranslationManagerActivity_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    return instance;
  }

  private QuranAdvancedSettingsFragment injectQuranAdvancedSettingsFragment(
      QuranAdvancedSettingsFragment instance) {
    QuranAdvancedSettingsFragment_MembersInjector.injectBookmarkImportExportModel(instance, getBookmarkImportExportModel());
    QuranAdvancedSettingsFragment_MembersInjector.injectQuranFileUtils(instance, getQuranFileUtils());
    QuranAdvancedSettingsFragment_MembersInjector.injectQuranScreenInfo(instance, getQuranScreenInfo());
    return instance;
  }

  private SuraListFragment injectSuraListFragment(SuraListFragment instance) {
    SuraListFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private JuzListFragment injectJuzListFragment(JuzListFragment instance) {
    JuzListFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private AyahPlaybackFragment injectAyahPlaybackFragment(AyahPlaybackFragment instance) {
    AyahPlaybackFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private JumpFragment injectJumpFragment(JumpFragment instance) {
    JumpFragment_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    return instance;
  }

  private TagBookmarkDialog injectTagBookmarkDialog(TagBookmarkDialog instance) {
    TagBookmarkDialog_MembersInjector.injectQuranInfo(instance, getQuranInfo());
    TagBookmarkDialog_MembersInjector.injectMTagBookmarkPresenter(instance, tagBookmarkPresenterProvider.get());
    return instance;
  }

  private AddTagDialog injectAddTagDialog(AddTagDialog instance) {
    AddTagDialog_MembersInjector.injectAddTagDialogPresenter(instance, getAddTagDialogPresenter());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private DnsModule dnsModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder dnsModule(DnsModule dnsModule) {
      this.dnsModule = Preconditions.checkNotNull(dnsModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder quranDataModule(QuranDataModule quranDataModule) {
      Preconditions.checkNotNull(quranDataModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder quranPageModule(QuranPageModule quranPageModule) {
      Preconditions.checkNotNull(quranPageModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      if (dnsModule == null) {
        this.dnsModule = new DnsModule();
      }
      return new DaggerApplicationComponent(applicationModule, dnsModule);
    }
  }

  private final class PagerActivityComponentBuilder implements PagerActivityComponent.Builder {
    private PagerActivityModule pagerActivityModule;

    @Override
    public PagerActivityComponentBuilder withPagerActivityModule(PagerActivityModule pagerModule) {
      this.pagerActivityModule = Preconditions.checkNotNull(pagerModule);
      return this;
    }

    @Override
    public PagerActivityComponent build() {
      Preconditions.checkBuilderRequirement(pagerActivityModule, PagerActivityModule.class);
      return new PagerActivityComponentImpl(pagerActivityModule);
    }
  }

  private final class PagerActivityComponentImpl implements PagerActivityComponent {
    private final PagerActivityModule pagerActivityModule;

    private Provider<RecentPagePresenter> recentPagePresenterProvider;

    private Provider<QuranAppUtils> quranAppUtilsProvider;

    private Provider<ShareUtil> shareUtilProvider;

    private Provider<TranslationModel> translationModelProvider;

    private Provider<TranslationUtil> provideTranslationUtilProvider;

    private Provider<String> provideImageWidthProvider;

    private Provider<AyahInfoDatabaseProvider> ayahInfoDatabaseProvider;

    private Provider<CoordinatesModel> coordinatesModelProvider;

    private Provider<QuranPageWorker> quranPageWorkerProvider;

    private PagerActivityComponentImpl(PagerActivityModule pagerActivityModuleParam) {
      this.pagerActivityModule = pagerActivityModuleParam;
      initialize(pagerActivityModuleParam);
    }

    private AudioPresenter getAudioPresenter() {
      return new AudioPresenter(DaggerApplicationComponent.this.getQuranInfo(), DaggerApplicationComponent.this.audioUtilsProvider.get(), DaggerApplicationComponent.this.getQuranFileUtils());}

    private InlineTranslationPresenter getInlineTranslationPresenter() {
      return InlineTranslationPresenter_Factory.newInlineTranslationPresenter(translationModelProvider.get(), DaggerApplicationComponent.this.translationsDBAdapterProvider.get(), provideTranslationUtilProvider.get(), DaggerApplicationComponent.this.provideQuranSettingsProvider.get(), DaggerApplicationComponent.this.getQuranInfo());}

    @SuppressWarnings("unchecked")
    private void initialize(final PagerActivityModule pagerActivityModuleParam) {
      this.recentPagePresenterProvider = DoubleCheck.provider(RecentPagePresenter_Factory.create(DaggerApplicationComponent.this.recentPageModelProvider));
      this.quranAppUtilsProvider = SingleCheck.provider(QuranAppUtils_Factory.create(DaggerApplicationComponent.this.quranInfoProvider));
      this.shareUtilProvider = SingleCheck.provider(ShareUtil_Factory.create(DaggerApplicationComponent.this.quranInfoProvider));
      this.translationModelProvider = DoubleCheck.provider(TranslationModel_Factory.create(DaggerApplicationComponent.this.provideApplicationContextProvider, DaggerApplicationComponent.this.quranFileUtilsProvider));
      this.provideTranslationUtilProvider = DoubleCheck.provider(PagerActivityModule_ProvideTranslationUtilFactory.create(pagerActivityModuleParam, DaggerApplicationComponent.this.provideApplicationContextProvider, DaggerApplicationComponent.this.quranInfoProvider));
      this.provideImageWidthProvider = DoubleCheck.provider(PagerActivityModule_ProvideImageWidthFactory.create(pagerActivityModuleParam, DaggerApplicationComponent.this.quranScreenInfoProvider));
      this.ayahInfoDatabaseProvider = DoubleCheck.provider(AyahInfoDatabaseProvider_Factory.create(DaggerApplicationComponent.this.provideApplicationContextProvider, provideImageWidthProvider, DaggerApplicationComponent.this.quranFileUtilsProvider));
      this.coordinatesModelProvider = DoubleCheck.provider(CoordinatesModel_Factory.create(ayahInfoDatabaseProvider));
      this.quranPageWorkerProvider = DoubleCheck.provider(QuranPageWorker_Factory.create(DaggerApplicationComponent.this.provideApplicationContextProvider, DaggerApplicationComponent.this.provideOkHttpClientProvider, provideImageWidthProvider, DaggerApplicationComponent.this.quranScreenInfoProvider, DaggerApplicationComponent.this.quranFileUtilsProvider));
    }

    @Override
    public QuranPageComponent.Builder quranPageComponentBuilder() {
      return new QuranPageComponentBuilder();}

    @Override
    public void inject(PagerActivity pagerActivity) {
      injectPagerActivity(pagerActivity);}

    @Override
    public void inject(AyahTranslationFragment ayahTranslationFragment) {
      injectAyahTranslationFragment(ayahTranslationFragment);}

    private PagerActivity injectPagerActivity(PagerActivity instance) {
      PagerActivity_MembersInjector.injectBookmarkModel(instance, DaggerApplicationComponent.this.bookmarkModelProvider.get());
      PagerActivity_MembersInjector.injectRecentPagePresenter(instance, recentPagePresenterProvider.get());
      PagerActivity_MembersInjector.injectQuranSettings(instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
      PagerActivity_MembersInjector.injectQuranScreenInfo(instance, DaggerApplicationComponent.this.getQuranScreenInfo());
      PagerActivity_MembersInjector.injectArabicDatabaseUtils(instance, DaggerApplicationComponent.this.arabicDatabaseUtilsProvider.get());
      PagerActivity_MembersInjector.injectTranslationsDBAdapter(instance, DaggerApplicationComponent.this.translationsDBAdapterProvider.get());
      PagerActivity_MembersInjector.injectQuranAppUtils(instance, quranAppUtilsProvider.get());
      PagerActivity_MembersInjector.injectShareUtil(instance, shareUtilProvider.get());
      PagerActivity_MembersInjector.injectAudioUtils(instance, DaggerApplicationComponent.this.audioUtilsProvider.get());
      PagerActivity_MembersInjector.injectQuranInfo(instance, DaggerApplicationComponent.this.getQuranInfo());
      PagerActivity_MembersInjector.injectQuranFileUtils(instance, DaggerApplicationComponent.this.getQuranFileUtils());
      PagerActivity_MembersInjector.injectAudioPresenter(instance, getAudioPresenter());
      return instance;
    }

    private AyahTranslationFragment injectAyahTranslationFragment(
        AyahTranslationFragment instance) {
      AyahTranslationFragment_MembersInjector.injectQuranInfo(instance, DaggerApplicationComponent.this.getQuranInfo());
      AyahTranslationFragment_MembersInjector.injectQuranSettings(instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
      AyahTranslationFragment_MembersInjector.injectTranslationPresenter(instance, getInlineTranslationPresenter());
      return instance;
    }

    private final class QuranPageComponentBuilder implements QuranPageComponent.Builder {
      private com.salamquran.android.module.fragment.QuranPageModule quranPageModule;

      @Override
      public QuranPageComponentBuilder withQuranPageModule(
          com.salamquran.android.module.fragment.QuranPageModule quranPageModule) {
        this.quranPageModule = Preconditions.checkNotNull(quranPageModule);
        return this;
      }

      @Override
      public QuranPageComponent build() {
        Preconditions.checkBuilderRequirement(quranPageModule, com.salamquran.android.module.fragment.QuranPageModule.class);
        return new QuranPageComponentImpl(quranPageModule);
      }
    }

    private final class QuranPageComponentImpl implements QuranPageComponent {
      private Provider<Integer[]> providePagesProvider;

      private Provider<QuranPagePresenter> quranPagePresenterProvider;

      private Provider<AyahTrackerPresenter> ayahTrackerPresenterProvider;

      private Provider<TranslationPresenter> translationPresenterProvider;

      private QuranPageComponentImpl(
          com.salamquran.android.module.fragment.QuranPageModule quranPageModuleParam) {

        initialize(quranPageModuleParam);
      }

      private Set<ImageDrawHelper> getSetOfImageDrawHelper() {
        return SetBuilder.<ImageDrawHelper>newSetBuilder(1).addAll(QuranPageModule_ProvideImageDrawHelpersFactory.proxyProvideImageDrawHelpers()).build();}

      @SuppressWarnings("unchecked")
      private void initialize(
          final com.salamquran.android.module.fragment.QuranPageModule quranPageModuleParam) {
        this.providePagesProvider = QuranPageModule_ProvidePagesFactory.create(quranPageModuleParam);
        this.quranPagePresenterProvider = DoubleCheck.provider(QuranPagePresenter_Factory.create(DaggerApplicationComponent.this.bookmarkModelProvider, PagerActivityComponentImpl.this.coordinatesModelProvider, DaggerApplicationComponent.this.provideQuranSettingsProvider, PagerActivityComponentImpl.this.quranPageWorkerProvider, providePagesProvider));
        this.ayahTrackerPresenterProvider = DoubleCheck.provider(AyahTrackerPresenter_Factory.create(DaggerApplicationComponent.this.quranInfoProvider, DaggerApplicationComponent.this.quranFileUtilsProvider));
        this.translationPresenterProvider = DoubleCheck.provider(TranslationPresenter_Factory.create(PagerActivityComponentImpl.this.translationModelProvider, DaggerApplicationComponent.this.provideQuranSettingsProvider, DaggerApplicationComponent.this.translationsDBAdapterProvider, PagerActivityComponentImpl.this.provideTranslationUtilProvider, PagerActivityComponentImpl.this.shareUtilProvider, DaggerApplicationComponent.this.quranInfoProvider, providePagesProvider));
      }

      @Override
      public void inject(QuranPageFragment quranPageFragment) {
        injectQuranPageFragment(quranPageFragment);}

      @Override
      public void inject(TabletFragment tabletFragment) {
        injectTabletFragment(tabletFragment);}

      @Override
      public void inject(TranslationFragment translationFragment) {
        injectTranslationFragment(translationFragment);}

      private QuranPageFragment injectQuranPageFragment(QuranPageFragment instance) {
        QuranPageFragment_MembersInjector.injectQuranInfo(instance, DaggerApplicationComponent.this.getQuranInfo());
        QuranPageFragment_MembersInjector.injectQuranSettings(instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
        QuranPageFragment_MembersInjector.injectQuranPagePresenter(instance, quranPagePresenterProvider.get());
        QuranPageFragment_MembersInjector.injectAyahTrackerPresenter(instance, ayahTrackerPresenterProvider.get());
        QuranPageFragment_MembersInjector.injectAyahSelectedListener(instance, PagerActivityModule_ProvideAyahSelectedListenerFactory.proxyProvideAyahSelectedListener(PagerActivityComponentImpl.this.pagerActivityModule));
        QuranPageFragment_MembersInjector.injectQuranScreenInfo(instance, DaggerApplicationComponent.this.getQuranScreenInfo());
        QuranPageFragment_MembersInjector.injectImageDrawHelpers(instance, getSetOfImageDrawHelper());
        return instance;
      }

      private TabletFragment injectTabletFragment(TabletFragment instance) {
        TabletFragment_MembersInjector.injectQuranSettings(instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
        TabletFragment_MembersInjector.injectAyahTrackerPresenter(instance, ayahTrackerPresenterProvider.get());
        TabletFragment_MembersInjector.injectQuranPagePresenter(instance, DoubleCheck.lazy(quranPagePresenterProvider));
        TabletFragment_MembersInjector.injectTranslationPresenter(instance, DoubleCheck.lazy(translationPresenterProvider));
        TabletFragment_MembersInjector.injectAyahSelectedListener(instance, PagerActivityModule_ProvideAyahSelectedListenerFactory.proxyProvideAyahSelectedListener(PagerActivityComponentImpl.this.pagerActivityModule));
        TabletFragment_MembersInjector.injectQuranScreenInfo(instance, DaggerApplicationComponent.this.getQuranScreenInfo());
        TabletFragment_MembersInjector.injectQuranInfo(instance, DaggerApplicationComponent.this.getQuranInfo());
        TabletFragment_MembersInjector.injectImageDrawHelpers(instance, getSetOfImageDrawHelper());
        return instance;
      }

      private TranslationFragment injectTranslationFragment(TranslationFragment instance) {
        TranslationFragment_MembersInjector.injectQuranInfo(instance, DaggerApplicationComponent.this.getQuranInfo());
        TranslationFragment_MembersInjector.injectQuranSettings(instance, DaggerApplicationComponent.this.provideQuranSettingsProvider.get());
        TranslationFragment_MembersInjector.injectPresenter(instance, translationPresenterProvider.get());
        TranslationFragment_MembersInjector.injectAyahTrackerPresenter(instance, ayahTrackerPresenterProvider.get());
        return instance;
      }
    }
  }
}
