// Generated by Dagger (https://google.github.io/dagger).
package com.salamquran.android.pageselect;

import com.ermile.data.source.PageProvider;
import com.salamquran.android.util.ImageUtil;
import com.salamquran.android.util.QuranFileUtils;
import dagger.internal.Factory;
import io.reactivex.Scheduler;
import java.util.Map;
import javax.inject.Provider;

public final class PageSelectPresenter_Factory implements Factory<PageSelectPresenter> {
  private final Provider<ImageUtil> imageUtilProvider;

  private final Provider<QuranFileUtils> quranFileUtilsProvider;

  private final Provider<Scheduler> mainThreadSchedulerProvider;

  private final Provider<Map<String, PageProvider>> pageTypesProvider;

  public PageSelectPresenter_Factory(Provider<ImageUtil> imageUtilProvider,
      Provider<QuranFileUtils> quranFileUtilsProvider,
      Provider<Scheduler> mainThreadSchedulerProvider,
      Provider<Map<String, PageProvider>> pageTypesProvider) {
    this.imageUtilProvider = imageUtilProvider;
    this.quranFileUtilsProvider = quranFileUtilsProvider;
    this.mainThreadSchedulerProvider = mainThreadSchedulerProvider;
    this.pageTypesProvider = pageTypesProvider;
  }

  @Override
  public PageSelectPresenter get() {
    return new PageSelectPresenter(imageUtilProvider.get(), quranFileUtilsProvider.get(), mainThreadSchedulerProvider.get(), pageTypesProvider.get());
  }

  public static PageSelectPresenter_Factory create(Provider<ImageUtil> imageUtilProvider,
      Provider<QuranFileUtils> quranFileUtilsProvider,
      Provider<Scheduler> mainThreadSchedulerProvider,
      Provider<Map<String, PageProvider>> pageTypesProvider) {
    return new PageSelectPresenter_Factory(imageUtilProvider, quranFileUtilsProvider, mainThreadSchedulerProvider, pageTypesProvider);
  }

  public static PageSelectPresenter newPageSelectPresenter(ImageUtil imageUtil,
      QuranFileUtils quranFileUtils, Scheduler mainThreadScheduler,
      Map<String, PageProvider> pageTypes) {
    return new PageSelectPresenter(imageUtil, quranFileUtils, mainThreadScheduler, pageTypes);
  }
}
